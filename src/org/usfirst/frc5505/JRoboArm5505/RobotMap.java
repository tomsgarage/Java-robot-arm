// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5505.JRoboArm5505;
    
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DoubleSolenoid elbowSolenoid;
    public static SpeedController driveTrainRightFrontMotor;
    public static SpeedController driveTrainRightRearMotor;
    public static SpeedController driveTrainLeftRearMotor;
    public static SpeedController driveTrainLeftFrontMotor;
    public static RobotDrive driveTrainRobotDrive41;
    public static DoubleSolenoid clawSolenoid;
    public static Compressor pnuematicsCompressor;
    public static DoubleSolenoid shoulderSolenoid;
    public static SpeedController rotateArmMotor;
    public static GearTooth rotateArmEncoder;
    public static DigitalInput rotateArmClockwiseLimit;
    public static DigitalInput rotateArmCounterClockwiseLimit;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        elbowSolenoid = new DoubleSolenoid(0, 2, 3);      
        LiveWindow.addActuator("Elbow", "Solenoid", elbowSolenoid);
        
        driveTrainRightFrontMotor = new Talon(0);
        LiveWindow.addActuator("DriveTrain", "RightFrontMotor", (Talon) driveTrainRightFrontMotor);
        
        driveTrainRightRearMotor = new Talon(2);
        LiveWindow.addActuator("DriveTrain", "RightRearMotor", (Talon) driveTrainRightRearMotor);
        
        driveTrainLeftRearMotor = new Talon(4);
        LiveWindow.addActuator("DriveTrain", "LeftRearMotor", (Talon) driveTrainLeftRearMotor);
        
        driveTrainLeftFrontMotor = new Talon(3);
        LiveWindow.addActuator("DriveTrain", "LeftFrontMotor", (Talon) driveTrainLeftFrontMotor);
        
        driveTrainRobotDrive41 = new RobotDrive(driveTrainLeftFrontMotor, driveTrainLeftRearMotor,
              driveTrainRightFrontMotor, driveTrainRightRearMotor);
        
        driveTrainRobotDrive41.setSafetyEnabled(false);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);

        clawSolenoid = new DoubleSolenoid(0, 0, 1);      
        LiveWindow.addActuator("Claw", "Solenoid", clawSolenoid);
        
        pnuematicsCompressor = new Compressor(0);
        
        
        shoulderSolenoid = new DoubleSolenoid(0, 4, 5);      
        LiveWindow.addActuator("Shoulder", "Solenoid", shoulderSolenoid);
        
        rotateArmMotor = new Talon(5);
        LiveWindow.addActuator("RotateArm", "Motor", (Talon) rotateArmMotor);
        
        rotateArmEncoder = new GearTooth(0, false);
        LiveWindow.addSensor("RotateArm", "Encoder", rotateArmEncoder);
        
        rotateArmClockwiseLimit = new DigitalInput(1);
        LiveWindow.addSensor("RotateArm", "ClockwiseLimit", rotateArmClockwiseLimit);
        
        rotateArmCounterClockwiseLimit = new DigitalInput(2);
        LiveWindow.addSensor("RotateArm", "CounterClockwiseLimit", rotateArmCounterClockwiseLimit);
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
